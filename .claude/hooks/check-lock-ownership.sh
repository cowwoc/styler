#!/bin/bash
# Check for active tasks owned by this session
# Runs on SessionStart to detect tasks that need resuming after context compaction
#
# BEHAVIOR:
# - Checks ALL lock files for tasks owned by this session
# - Shows "ACTIVE TASK DETECTED" warning with EXACT commands to navigate to task worktree
# - Triggers regardless of current working directory
# - Prevents working on main when task worktree exists

# Parse hook input
INPUT=$(cat)
SESSION_ID=$(echo "$INPUT" | jq -r '.session_id // empty')

# Exit if no session ID
if [ -z "$SESSION_ID" ]; then
  exit 0
fi

CURRENT_DIR=$(pwd)

# STEP 2: Check for invalid lock files (non-.json extensions) containing this session_id
INVALID_LOCKS=$(find /workspace/locks -type f ! -name "*.json" -exec grep -l "\"session_id\":\s*\"$SESSION_ID\"" {} \; 2>/dev/null)

if [ -n "$INVALID_LOCKS" ]; then
  MESSAGE="## üö® CRITICAL: INVALID LOCK FILE DETECTED

**Your session_id found in INCORRECTLY-NAMED lock file(s)**:
$INVALID_LOCKS

**Problem**: Lock files MUST use \`.json\` extension (per task-protocol-core.md)

**‚ö†Ô∏è THIS FILE IS INVALID AND WILL BE IGNORED BY ALL PROTOCOL SCRIPTS**

**Action Required**:
1. You do NOT own any valid task locks
2. Remove the invalid file: \`rm $INVALID_LOCKS\`
3. If you need to claim this task, follow proper protocol in task-protocol-core.md

**Why this matters**:
- The \`check-lock-ownership.sh\` hook ONLY checks \`*.json\` files
- No protocol script will recognize ownership from non-.json files
- Working on tasks without proper \`.json\` lock causes race conditions"

  jq -n \
    --arg event "SessionStart" \
    --arg context "$MESSAGE" \
    '{
      "hookSpecificOutput": {
        "hookEventName": $event,
        "additionalContext": $context
      }
    }'
  exit 0
fi

# STEP 3: Search ALL lock files for this session_id
LOCK_FILE=$(find /workspace/locks -name "*.json" -type f -exec grep -l "\"session_id\":\s*\"$SESSION_ID\"" {} \; 2>/dev/null | head -1)

if [ -z "$LOCK_FILE" ]; then
  # No active task for this session
  exit 0
fi

# Extract task details from lock file
TASK_NAME=$(basename "$LOCK_FILE" .json)
TASK_STATE=$(grep -oP '"state":\s*"\K[^"]+' "$LOCK_FILE")
TASK_WORKTREE="/workspace/branches/$TASK_NAME/code"

# Check for user approval marker if in REVIEW state
APPROVAL_STATUS=""
APPROVAL_MARKER="/workspace/branches/$TASK_NAME/user-approval-obtained.flag"
if [[ "$TASK_STATE" == "REVIEW" ]]; then
  if [ -f "$APPROVAL_MARKER" ]; then
    APPROVAL_STATUS="‚úÖ User Approval: OBTAINED"
  else
    APPROVAL_STATUS="‚ùå User Approval: NOT OBTAINED - CHECKPOINT REQUIRED"
  fi
fi

# Check if worktree exists
if [ ! -d "$TASK_WORKTREE" ]; then
  MESSAGE="## üö® ERROR: Lock exists but worktree missing

**Task**: \`$TASK_NAME\`
**Lock File**: \`$LOCK_FILE\`
**Expected Worktree**: \`$TASK_WORKTREE\` (NOT FOUND)

**Action Required**:
1. The worktree was probably removed incorrectly
2. Release the lock: \`rm $LOCK_FILE\`
3. Select a new task from todo.md"

  jq -n \
    --arg event "SessionStart" \
    --arg context "$MESSAGE" \
    '{
      "hookSpecificOutput": {
        "hookEventName": $event,
        "additionalContext": $context
      }
    }'
  exit 0
fi

# Check for AWAITING_USER_APPROVAL checkpoint state
if [ "$TASK_STATE" = "AWAITING_USER_APPROVAL" ]; then
  # Extract checkpoint details
  COMMIT_SHA=$(jq -r '.checkpoint.commit_sha // "unknown"' "$LOCK_FILE" 2>/dev/null)
  CHECKPOINT_APPROVED=$(jq -r '.checkpoint.approved // false' "$LOCK_FILE" 2>/dev/null)

  MESSAGE="## üö® CHECKPOINT ACTIVE - USER APPROVAL REQUIRED

**Task**: \`$TASK_NAME\`
**Current State**: \`AWAITING_USER_APPROVAL\` ‚è∏Ô∏è
**Lock File**: \`$LOCK_FILE\`
**Worktree**: \`$TASK_WORKTREE\`
**Commit Presented**: \`$COMMIT_SHA\`
**Approval Status**: \`$CHECKPOINT_APPROVED\`

## ‚ö†Ô∏è CRITICAL - MANDATORY USER APPROVAL CHECKPOINT

The implementation has been completed and changes have been committed.
**YOU ARE AT CHECKPOINT 2** - This state exists because:
1. All stakeholder agents returned ‚úÖ APPROVED
2. Implementation commit was created with SHA: \`$COMMIT_SHA\`
3. Changes were presented to user for review
4. **WAITING FOR USER APPROVAL** before proceeding to merge

## üî¥ REQUIRED ACTION - DO NOT BYPASS

**You MUST:**
1. Navigate to task worktree: \`cd $TASK_WORKTREE\`
2. Show the commit to remind user: \`git show --stat $COMMIT_SHA\`
3. Show the diff: \`git diff ${COMMIT_SHA}~1 $COMMIT_SHA\`
4. Present implementation summary to user
5. **WAIT for explicit user approval** (\"Approved\", \"LGTM\", \"Proceed\")

**PROHIBITED:**
‚ùå Proceeding to COMPLETE state without user approval
‚ùå Assuming \"continue\" means approval
‚ùå Bypassing checkpoint because agent approvals exist
‚ùå Interpreting silence as approval
‚ùå Treating bypass mode as checkpoint override

## üõë ENFORCEMENT

This checkpoint is **MANDATORY REGARDLESS** of:
- Bypass mode settings
- Automation mode
- User instructions to \"continue\" or \"finish\"
- Previous context or conversation

**ONLY explicit approval words allow Phase 7 transition:**
‚úÖ \"Approved\" / \"LGTM\" / \"Looks good\" / \"Proceed\" / \"Yes, merge it\"

## Navigation Commands

\`\`\`bash
cd $TASK_WORKTREE
git show --stat $COMMIT_SHA
git diff ${COMMIT_SHA}~1 $COMMIT_SHA
\`\`\`"

  jq -n \
    --arg event "SessionStart" \
    --arg context "$MESSAGE" \
    '{
      "hookSpecificOutput": {
        "hookEventName": $event,
        "additionalContext": $context
      }
    }'
  exit 0
fi

MESSAGE="## ‚ö†Ô∏è ACTIVE TASK DETECTED

**Task**: \`$TASK_NAME\`
**Current State**: \`$TASK_STATE\`
**Lock File**: \`$LOCK_FILE\`
**Worktree**: \`$TASK_WORKTREE\`
${APPROVAL_STATUS:+**Checkpoint Status**: \`$APPROVAL_STATUS\`}

üö® **YOU MUST RESUME THIS TASK** before starting any new work.

## üî¥ FIRST: Navigate to Task Worktree

**Your current location**: \`$CURRENT_DIR\`

**YOU MUST RUN THIS COMMAND FIRST** (before ANY other operations):

\`\`\`bash
cd $TASK_WORKTREE
\`\`\`

**THEN verify your location**:

\`\`\`bash
pwd  # Should show: $TASK_WORKTREE
\`\`\`

**THEN check task status**:

\`\`\`bash
git status
\`\`\`

## Action Required After Navigation:

1. Continue from state: \`$TASK_STATE\`
2. Complete all remaining protocol phases
3. Only after Phase 8 (CLEANUP) may you select a new task

${APPROVAL_STATUS:+${APPROVAL_STATUS/NOT OBTAINED/## üõë MANDATORY USER APPROVAL CHECKPOINT #2

**YOU MUST STOP AFTER REVIEW** and present changes for user approval.

**CRITICAL**: Proceeding to COMPLETE state without user approval is a PROTOCOL VIOLATION.

**REQUIRED STEPS BEFORE COMPLETE**:
1. ‚úÖ Commit all changes to task branch (if not already committed)
2. ‚úÖ Record commit SHA: \`git rev-parse HEAD\`
3. ‚úÖ Present to user:
   - Commit SHA for review
   - Files changed: \`git show --stat HEAD\`
   - Key implementation decisions
   - Test results (all passing)
   - Quality gates (checkstyle: PASS, PMD: PASS, build: SUCCESS)
4. ‚úÖ Ask: \"Please review these changes. Would you like me to proceed with finalizing (COMPLETE ‚Üí CLEANUP)?\"
5. ‚úÖ WAIT for explicit approval keywords: \"yes\", \"approved\", \"LGTM\", \"proceed\", \"looks good\"

**ADD TODOWRITE CHECKPOINT TASK**:
\`\`\`
‚úÖ Execute REVIEW phase - Stakeholder approval (completed)
‚è∏Ô∏è **Wait for user review and approval of changes** (in_progress) ‚Üê ADD THIS
‚è∏Ô∏è Execute COMPLETE phase - Merge to main (pending)
\`\`\`

**PROHIBITED ASSUMPTIONS**:
‚ùå \"Continue without asking\" instructions - DOES NOT skip checkpoint
‚ùå Bypass mode settings - DOES NOT skip checkpoint
‚ùå Stakeholder approval alone - DOES NOT equal user approval
‚ùå Silence or lack of objection - DOES NOT mean approval

**ENFORCEMENT**: \`enforce-user-approval.sh\` hook will BLOCK COMPLETE transition without approval marker}}

## CRITICAL - AUTONOMOUS COMPLETION REQUIREMENT:

‚ö†Ô∏è  **DO NOT** pause mid-protocol to provide status updates
‚ö†Ô∏è  **DO NOT** ask user for permission to continue
‚ö†Ô∏è  **DO NOT** summarize progress instead of working

## REQUIRED BEHAVIOR:

‚úÖ Use tools IMMEDIATELY to make progress
‚úÖ Continue working autonomously through all phases
‚úÖ Only stop for genuine external blockers (API down, missing credentials)

## PROHIBITED PATTERNS:

‚ùå Working on main branch while task worktree exists
‚ùå Checking \`git status\` on main when you have an active task
‚ùå Performing ANY operations before navigating to task worktree
‚ùå Select a new task from todo.md
‚ùå Delete or modify the lock file
‚ùå Assume this task is abandoned
‚ùå Ask \"would you like me to continue?\"
‚ùå Use task complexity/duration as excuse to pause"

# Output as hook response
jq -n \
  --arg event "SessionStart" \
  --arg context "$MESSAGE" \
  '{
    "hookSpecificOutput": {
      "hookEventName": $event,
      "additionalContext": $context
    }
  }'
